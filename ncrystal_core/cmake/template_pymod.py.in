################################################################################
##                                                                            ##
##  This file is part of NCrystal (see https://mctools.github.io/ncrystal/)   ##
##                                                                            ##
##  Copyright 2015-2024 NCrystal developers                                   ##
##                                                                            ##
##  Licensed under the Apache License, Version 2.0 (the "License");           ##
##  you may not use this file except in compliance with the License.          ##
##  You may obtain a copy of the License at                                   ##
##                                                                            ##
##      http://www.apache.org/licenses/LICENSE-2.0                            ##
##                                                                            ##
##  Unless required by applicable law or agreed to in writing, software       ##
##  distributed under the License is distributed on an "AS IS" BASIS,         ##
##  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  ##
##  See the License for the specific language governing permissions and       ##
##  limitations under the License.                                            ##
##                                                                            ##
################################################################################

# This is the _ncrystal_core.info or _ncrystal_core_monolithic.info Python
# module, containing an appropriate wrapper function for exposing
# ncrystal-config as a Python entry-point, and containing information about the
# installation.

def _ncrystal_config_cli_wrapper():
    import subprocess
    import pathlib
    import sys
    f = pathlib.Path(__file__).parent.joinpath('data','bin','ncrystal-config')
    a = sys.argv[:]
    a[0] = f
    rv = subprocess.run( a )
    raise SystemExit(rv.returncode)

def version():
    #Expanded by CMake:
    return '@NCrystal_VERSION@'

def libname():
    #Expanded by CMake:
    return '$<TARGET_FILE_NAME:NCrystal>'#NB: generator expression

def namespace():
    #Expanded by CMake:
    return '@NCRYSTAL_NAMESPACE@'

def libpath():
    import pathlib
    #Name of last component before libname() is expanded by CMake:
    return pathlib.Path(__file__).parent.joinpath(
        'data', '@ncrystal_pymod_shlib_dirname@', libname()
    ).absolute().resolve()
