name: plugindb

on:
  push:
  pull_request:
  schedule:
    - cron: '10 15 * * 4'  # 10:15 every Friday

jobs:

  preparations:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        path: src

    - name: Install ncdevtool reqs
      run: pip install -r ./src/devel/reqs/requirements_devel.txt

    - name: ncdevtool checks
      run: ./src/devel/bin/ncdevtool check -n "fix""me"

    - name: Generate plugin list
      id: generate-plugin-list
      run: echo "pluginlist=$(./src/devel/bin/ncdevtool plugindb --mode=listjson)" >> $GITHUB_OUTPUT

    outputs:
      pluginlist: ${{ steps.generate-plugin-list.outputs.pluginlist }}
      platforms: '[ "ubuntu-latest", "macos-latest", "windows-latest","ubuntu-24.04-arm", "macos-13" ]'

  build_ncrystal:
    needs: [ preparations ]
    strategy:
      matrix:
        os: ${{ fromJson(needs.preparations.outputs.platforms) }}

    name: Build NCrystal @ ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        path: src

    - name: Setup python
      uses: actions/setup-python@v5
      with:
        python-version: 3.12

    - name: Build ncrystal-core
      run: pipx run build ./src/ncrystal_core --wheel --outdir ./dist

    - name: Build ncrystal-python
      run: pipx run build ./src/ncrystal_python --wheel --outdir ./dist

    - name: Build ncrystal-metapkg
      run: pipx run build ./src/ncrystal_metapkg --wheel --outdir ./dist

    - name: Build ncrystal-pypluginmgr
      run: pipx run build ./src/ncrystal_pypluginmgr --wheel --outdir ./dist

    - name: upload ncrystal wheels
      uses: actions/upload-artifact@v4
      with:
        name: wheels-ncrystal-${{ matrix.os }}
        path: ./dist/*.whl
        if-no-files-found: error

    - name: Install numpy
      run: pip install numpy

    - name: Install ncrystal
      run: pip install --no-index --find-links dist ncrystal

    - name: Pip check
      run: pip check

    - name: Test ncrystal
      run: nctool --test

  checkplugin:
    needs: [ preparations, build_ncrystal ]

    strategy:
      fail-fast: false
      matrix:
        plugin: ${{ fromJson(needs.preparations.outputs.pluginlist) }}
        os: ${{ fromJson(needs.preparations.outputs.platforms) }}

    name: ${{ matrix.plugin }} @ ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        path: src

    - name: Setup python
      uses: actions/setup-python@v5
      with:
        python-version: 3.12

    - name: Check python version
      run: python --version

    - name: Pip install pyyaml for ncdevtool
      run: pip install pyyaml

    #We want to make sure that the plugin code ends up in ./src_plugin, no matter if it is:
    #  1) A remote repo with the plugin at the root
    #  2) A remote repo with the plugin in some subdir
    #  3) A subdir of the already checkout out ncrystal repo itself

    - name: Extract plugin info
      id: pluginfo
      shell: python
      run: |
        import subprocess
        import os
        import sys
        import pathlib
        plugin_name = "${{ matrix.plugin }}"
        GITHUB_OUTPUT = pathlib.Path(os.environ['GITHUB_OUTPUT'])
        ncdevtool = pathlib.Path('.').absolute().joinpath('src','devel','bin','ncdevtool')
        out = {}
        for var in ['github_repo_key','repo_subdir','gitref','disable_tests','is_on_pypi']:
            rv=subprocess.run([sys.executable,str(ncdevtool),'plugindb','-e',plugin_name,var],check=True,capture_output=True)
            out[var]=rv.stdout.decode().strip()
        if out["github_repo_key"] == 'mctools/ncrystal':
            assert out["repo_subdir"]
            out['mode'] = 'ncrystalrepo'
        else:
          if out["repo_subdir"]:
              out['mode'] = 'otherreposubdir'
          else:
              out['mode'] = 'otherreporoot'

        for k,v in sorted(out.items()):
            print(f'Setting {k}="{v}"')
            with GITHUB_OUTPUT.open('at') as fh:
                fh.write(f'{k}={v}\n')

    - name: Checkout plugin repo as src_plugin
      if: steps.pluginfo.outputs.mode == 'otherreporoot'
      uses: actions/checkout@v4
      with:
        path: src_plugin
        repository: ${{ steps.pluginfo.outputs.github_repo_key }}
        ref: ${{ steps.pluginfo.outputs.gitref }}

    - name: Checkout plugin repo as src_plugin_reporoot
      if: steps.pluginfo.outputs.mode == 'otherreposubdir'
      uses: actions/checkout@v4
      with:
        path: src_plugin_reporoot
        repository: ${{ steps.pluginfo.outputs.github_repo_key }}
        ref: ${{ steps.pluginfo.outputs.gitref }}

    - name: Copy src_plugin_reporoot subdir to src_plugin
      if: steps.pluginfo.outputs.mode == 'otherreposubdir'
      shell: python
      run: |
        import shutil
        repo_subdir = "${{ steps.pluginfo.outputs.repo_subdir }}"
        shutil.copytree(f"./src_plugin_reporoot/{repo_subdir}/","./src_plugin")

    - name: Copy ncrystal repo subdir to src_plugin
      if: steps.pluginfo.outputs.mode == 'ncrystalrepo'
      shell: python
      run: |
        import shutil
        repo_subdir = "${{ steps.pluginfo.outputs.repo_subdir }}"
        shutil.copytree(f"./src/{repo_subdir}/","./src_plugin")

    #Done with preparing ./src_plugin.

    - name: Look in ./src_plugin
      shell: python
      run: |
        import pathlib
        d = pathlib.Path('.').joinpath('src_plugin')
        print('Contents of ./src_plugin:')
        for f in sorted(pathlib.Path('.').joinpath('src_plugin').iterdir()):
          print(' ',f)
        if not d.joinpath('pyproject.toml').is_file():
            raise SystemExit("Error: ./src_plugin/pyproject.toml not found!")

    - name: download ncrystal wheels
      uses: actions/download-artifact@v4
      with:
        name: wheels-ncrystal-${{ matrix.os }}
        path: ./dist

    - name: Install numpy and build backends
      run: pip install numpy "setuptools>=64.0" "scikit-build-core>=0.10"
      #                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      #NB: This covers all known plugins. If it will differ, we might want to
      #    simply parse the pyproject toml instead and extract them dynamically:

    - name: Install ncrystal
      run: pip install --no-index --find-links dist ncrystal ncrystal-pypluginmgr

    - name: Pip check
      run: pip check

    - name: Test ncrystal
      run: nctool --test

    - name: Pip list
      run: pip list

      #Note: we do not add --no-index or --no-deps here, since we want to allow
      #the plugin to use whatever plugin backend it desires.
    - name: Install plugin
      run: pip install ./src_plugin --no-deps --no-build-isolation

    - name: Pip list
      run: pip list

    - name: Pip check
      run: pip check

    - name: Verify plugin package has expected name
      run: pip show "ncrystal-plugin-${{ matrix.plugin }}"

    - name: Pip list
      run: pip list

    - name: Test plugin
      if: steps.pluginfo.outputs.disable_tests == ''
      run: ncrystal-pluginmanager --test "${{ matrix.plugin }}"

    - name: Uninstall plugin
      run: pip uninstall -y "ncrystal-plugin-${{ matrix.plugin }}"

    - name: Pip list
      run: pip list

    - name: Pip check
      run: pip check

    - name: Install plugin from PyPI
      if: steps.pluginfo.outputs.is_on_pypi != ''
      run: pip install "ncrystal-plugin-${{ matrix.plugin }}" --no-deps --no-build-isolation

    - name: Pip list
      run: pip list

    - name: Pip check
      run: pip check

    - name: Test PyPI plugin
      if: steps.pluginfo.outputs.is_on_pypi != '' && steps.pluginfo.outputs.disable_tests == ''
      run: ncrystal-pluginmanager --test "${{ matrix.plugin }}"

#FIXME: cppcheck plugin? And test the pip install git+... urls work.
