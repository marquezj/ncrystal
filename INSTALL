Installation of prebuilt packages
=================================

First of all note that NCrystal is available for installation via various
distribution channels such as in particular PyPI ("pip install ncrystal") and
conda ("conda install -c conda-forge ncrystal"). This is the recommended method
of getting hold of NCrystal, since NCrystal developers are themselves taking
care of packaging up NCrystal for PyPI and conda-forge. As a result, these
packages are usually completely up to date and with the most testing by the
NCrystal developers themselves.

However, it might also be the case that NCrystal comes bundled with your
application already. For example, this is usually the case if you are using
McStas. To test if this is indeed the case, you can try to import the NCrystal
python module ("import NCrystal") or run of the commandline utilities of
NCrystal in a terminal (for instance "ncrystal-config -s" or "nctool --test").

Finally, it is possible that third parties have have packaged NCrystal for your
platform. At the time of writing, the NCrystal developers are aware of the
existance of such third party NCrystal packages for both Debian and FreeBSD. We
have, however, not tested them ourselves.



Building from source
====================

Advanced users might wish to build NCrystal from the sources
(https://github.com/mctools/ncrystal). This is considered an expert-only
procedure, but it IS based on standard tools such as CMake and pyproject.toml so
should hopefully be somewhat straight forward. A brief high-level description
will be given in the following, but feel free to reach out and ask questions on
https://github.com/mctools/ncrystal/discussions in case something is not clear,
or if you run into issues.

Note that to avoid potential conflicts, it is highly recommended that you
uninstall any existing NCrystal packages from your environment before performing
manual installations!

Package structure
-----------------

Before release 4.0.0, NCrystal was distributed in a single monolithic package
named "ncrystal". It is still the case that users should generally just install
a package named "ncrystal", but people wishing to build from sources need to be
aware that "under-the-hood", the various components are now actually distributed
in separate packages. Currently, the packages are:

- **ncrystal-core**:
  - The NCrystal shared library (a binary file)
    - This binary file (.so/.dylib/.dll) is really the "engine" behind NCrystal.
  - Header files
    - These files (.hh/.h) are included when using the C/C++ API of NCrystal.
  - The NCrystal standard data library (NCMAT data).
    - These might be distributed as actual files, or embedded directly into the
      shared library.
  - The ncrystal-config command-line utility.
    - This binary executable can be used to get information about NCrystal. As
      long as it is your PATH, you can use it to find all the other components
      of NCrystal.
  - CMake configuration files:
    - Enables downstream CMake-based projects to use NCrystal via CMake
      "find_package(NCrystal)" calls
- **ncrystal-python**:
  - The NCrystal python module.
    - This allows you to do "import NCrystal" and use the Python API of NCrystal.
  - Command-line utilities
    - These commands (e.g. nctool, ncrystal_cif2ncmat, ...) are actually
      themselves written in Python, and can also be accessed from the Python API
      itself via the NCrystal.cliutils module (FIXME rename -> NCrystal.cli)
  - Note that this package can only be installed via Python installation tools
    like pip. Note additionally, that it does NOT technically depend on the
    ncrystal-core package, but of course does have a runtime requirement for
    it. This setup is intended to allow advanced deployment mechanisms where a
    manual CMake-based build of ncrystal-core is paired with a pip-based
    installation of ncrystal-python.
  - For convenience, this package has a dependency on Numpy.
- **ncrystal**:
  - This is a meta-package with no actual contents, but it depends on both
    the ncrystal-core and ncrystal-python packages, and thus provide a complete
    and self-consistent NCrystal installation when users use a package manager
    to install "ncrystal".
  - Note that the pinning in this package ensures that ncrystal-core and
    ncrystal-python packages are always installed in the same versions. Thus, if
    you install ncrystal 4.0.1, you will always get ncrystal-core==4.0.1 and
    ncrystal-python==4.0.1 as well.

Building ncrystal-core
----------------------

The ncrystal-core package can be built with either CMake or Python build tools
like pip, starting from the ncrystal_core subdirectory which contains both a
CMakeLists.txt and a pyproject.toml file. The pyproject.toml file simply uses
scikit-build to wrap the CMake under the hood, and is ignored if not using
Python build tools.

To build with Python build tools, simply point at the appropriate directory,
e.g.:

  $> pip install ./ncrystal_core

It is beyond the scope of the present instructions to discuss the procedure of
manual building with CMake. Simply note that it follows the usual procedure
(e.g. supports CMAKE_INSTALL_PREFIX etc.). To get started, here is nonetheless
how one might do it in BASH:

   $> cd /path/to/ncrystalsource
   $> mkdir build
   $> cmake -S . -B build \
        -DCMAKE_INSTALL_PREFIX=/path/to/ncrystalinstall \
        -DNCRYSTAL_ENABLE_DATA=EMBED
   $> cmake --build build --target install --config Release

You should then make sure that the directory where ncrystal-config was installed
is in your path, and you can use ncrystal-config to verify that it is
so. Depending on your platform and options, this might look like:

   $> export PATH="/path/to/ncrystalinstall/bin:$PATH"
   $> ncrystal-config --summary

To see specific NCrystal CMake options, use CMake tools to do so, or refer to
the file ncrystal_core/cmake/modules/ncrystal_options.cmake

Before reporting any issues with a manual CMake-based build of NCrystal, please
always try to completely clear your temporary CMake build directory and try
again.


Building ncrystal-python
------------------------

The ncrystal-python package can be built with Python build tools like pip,
starting from the ncrystal_python subdirectory which contains both an
appropriate pyproject.toml file:

  $> pip install ./ncrystal_python

Note that runtime (i.e. when import the NCrystal module), you will get failures
if ncrystal-core was not somehow installed. More specifically, if ncrystal-core
was not installed with Python tools, then the command "ncrystal-config" must be
available in your PATH, so the Python modules can use it to locate the binary
shared library from ncrystal-core.

Quick and dirty monolithic installations
----------------------------------------

If you are using Python and pip and simply wish to quick build and install a
particular revision of NCrystal into that environment, and you don't want to
have to care about the finer details of ncrystal-core and ncrystal-python above,
you can do so by simply pointing a "pip install" command at the *root* (and
*not* the ncrystal_core/ncrystal_python folders) of the NCrystal git
repository. Here are some examples, which also show how one might choose a
particular version tag og branch name:

$> pip install git+https://github.com/mctools/ncrystal
$> pip install git+https://github.com/mctools/ncrystal@v4.0.0
$> pip install git+https://github.com/mctools/ncrystal@develop

This will install a single package called "ncrystal-monolithic-bundle" into your
environment, which contains the contents of both ncrystal-core and
ncrystal-python.

WARNING: Due to the limitations of Python build tools, any existing
ncrystal-core or ncrystal-python package already in the environment will not be
automatically uninstalled first. So you MUST do so manually BEFORE running the
above command. If you are unsure what you have already installed, you might
use a command like "pip list" or "conda list" to investigate.
